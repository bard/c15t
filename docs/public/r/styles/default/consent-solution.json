{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "consent-solution",
  "type": "registry:ui",
  "author": "Koroflow (https://koroflow.com/components",
  "dependencies": [
    "@koroflow/core-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/consent/cookie-banner.tsx",
      "content": "\"use client\";\n\nimport { useConsentManager } from \"@koroflow/core-react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { X } from \"lucide-react\";\nimport * as React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/components/button\";\nimport {\n\tCard,\n\tCardDescription,\n\tCardFooter,\n\tCardHeader,\n\tCardTitle,\n} from \"@/registry/default/components/card\";\nimport ConsentCustomizationModal from \"@/registry/default/components/consent/consent-customization-modal\";\nimport { Overlay } from \"@/registry/default/components/consent/overlay\";\n\ntype HorizontalPosition = \"left\" | \"center\" | \"right\";\ntype VerticalPosition = \"top\" | \"bottom\";\n\ninterface PrivacyPopupProps extends React.HTMLAttributes<HTMLDivElement> {\n\tbannerDescription?: string;\n\tbannerTitle?: string;\n\thorizontalPosition?: HorizontalPosition;\n\tverticalPosition?: VerticalPosition;\n\tshowCloseButton?: boolean;\n}\n\nconst CookieBanner = React.forwardRef<HTMLDivElement, PrivacyPopupProps>(\n\t(\n\t\t{\n\t\t\tbannerDescription = \"This site uses cookies and similar technologies to measure and improve your experience and show you personalized content and ads.\",\n\t\t\tbannerTitle = \"We value your privacy\",\n\t\t\tclassName,\n\t\t\thorizontalPosition = \"left\",\n\t\t\tverticalPosition = \"bottom\",\n\t\t\tshowCloseButton = false,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst {\n\t\t\tshowPopup,\n\t\t\tsetShowPopup,\n\t\t\tsaveConsents,\n\t\t\tsetConsent,\n\t\t\tcallbacks,\n\t\t\tcomplianceSettings,\n\t\t\tisPrivacyDialogOpen,\n\t\t\thasConsented,\n\t\t\tconsents,\n\t\t} = useConsentManager();\n\n\t\tconst bannerShownRef = React.useRef(false);\n\t\tconst [isMounted, setIsMounted] = React.useState(false);\n\n\t\tReact.useEffect(() => {\n\t\t\tsetIsMounted(true);\n\t\t\treturn () => setIsMounted(false);\n\t\t}, []);\n\n\t\tReact.useEffect(() => {\n\t\t\tif (!isMounted) return;\n\n\t\t\tif (showPopup && !bannerShownRef.current && !hasConsented()) {\n\t\t\t\tcallbacks.onBannerShown?.();\n\t\t\t\tbannerShownRef.current = true;\n\t\t\t\tif (typeof document !== \"undefined\") {\n\t\t\t\t\tdocument.body.style.overflow = \"hidden\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn () => {\n\t\t\t\tif (typeof document !== \"undefined\") {\n\t\t\t\t\tdocument.body.style.overflow = \"\";\n\t\t\t\t}\n\t\t\t};\n\t\t}, [showPopup, callbacks, hasConsented, isMounted]);\n\n\t\tconst acceptAll = React.useCallback(() => {\n\t\t\tconst allConsents = Object.keys(consents) as (keyof typeof consents)[];\n\t\t\tallConsents.forEach((consentName) => {\n\t\t\t\tsetConsent(consentName, true);\n\t\t\t});\n\t\t\tsaveConsents(\"all\");\n\t\t}, [consents, setConsent, saveConsents]);\n\n\t\tconst rejectAll = React.useCallback(() => {\n\t\t\tsaveConsents(\"necessary\");\n\t\t}, [saveConsents]);\n\n\t\tconst handleClose = React.useCallback(() => {\n\t\t\tsetShowPopup(false);\n\t\t\tif (typeof document !== \"undefined\") {\n\t\t\t\tdocument.body.style.overflow = \"\";\n\t\t\t}\n\t\t\tcallbacks.onBannerClosed?.();\n\t\t}, [setShowPopup, callbacks]);\n\n\t\tconst positionClasses = cn(\n\t\t\t\"fixed z-50 max-w-md\",\n\t\t\t{\n\t\t\t\t\"left-4\": horizontalPosition === \"left\",\n\t\t\t\t\"right-4\": horizontalPosition === \"right\",\n\t\t\t\t\"left-1/2 -translate-x-1/2\": horizontalPosition === \"center\",\n\t\t\t\t\"top-4\": verticalPosition === \"top\",\n\t\t\t\t\"bottom-4\": verticalPosition === \"bottom\",\n\t\t\t},\n\t\t\tclassName,\n\t\t);\n\n\t\t// Early return for SSR and when user has consented\n\t\tif (!isMounted || (hasConsented() && !showPopup)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst BannerContent = () => (\n\t\t\t<AnimatePresence>\n\t\t\t\t{showPopup && !isPrivacyDialogOpen && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Overlay show={showPopup} />\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tclassName=\"fixed inset-0 z-50 flex items-end sm:items-center justify-center\"\n\t\t\t\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t\t\t\t\texit={{ opacity: 0 }}\n\t\t\t\t\t\t\trole=\"dialog\"\n\t\t\t\t\t\t\taria-modal=\"true\"\n\t\t\t\t\t\t\taria-labelledby=\"cookie-consent-title\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\tclassName={positionClasses}\n\t\t\t\t\t\t\t\tinitial={{ opacity: 0, y: 50 }}\n\t\t\t\t\t\t\t\tanimate={{ opacity: 1, y: 0 }}\n\t\t\t\t\t\t\t\texit={{ opacity: 0, y: 50 }}\n\t\t\t\t\t\t\t\ttransition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n\t\t\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t\t\t\t\t{showCloseButton && (\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"absolute right-2 top-2\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={handleClose}\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"Close cookie consent banner\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<CardTitle id=\"cookie-consent-title\">\n\t\t\t\t\t\t\t\t\t\t\t{bannerTitle}\n\t\t\t\t\t\t\t\t\t\t</CardTitle>\n\t\t\t\t\t\t\t\t\t\t<CardDescription>{bannerDescription}</CardDescription>\n\t\t\t\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t\t\t\t<CardFooter className=\"flex flex-col sm:flex-row justify-between gap-4\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-row justify-between gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t{complianceSettings.gdpr.enabled && (\n\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline\" size=\"sm\" onClick={rejectAll}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tReject All\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t<ConsentCustomizationModal>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline\" size=\"sm\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tCustomise Consent\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</ConsentCustomizationModal>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<Button size=\"sm\" onClick={acceptAll}>\n\t\t\t\t\t\t\t\t\t\t\tAccept All\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</CardFooter>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t);\n\n\t\treturn isMounted && createPortal(<BannerContent />, document.body);\n\t},\n);\n\nCookieBanner.displayName = \"CookieBanner\";\n\nexport default CookieBanner;\n",
      "type": "registry:ui",
      "target": "components/consent/cookie-banner.tsx"
    },
    {
      "path": "components/consent/overlay.tsx",
      "content": "import { AnimatePresence, motion } from \"framer-motion\";\nimport type React from \"react\";\n\ninterface OverlayProps {\n\tshow: boolean;\n}\n\nexport const Overlay: React.FC<OverlayProps> = ({ show }) => {\n\treturn (\n\t\t<AnimatePresence>\n\t\t\t{show && (\n\t\t\t\t<motion.div\n\t\t\t\t\tclassName=\"fixed inset-0 bg-black/50 z-40\"\n\t\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t\t\texit={{ opacity: 0 }}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</AnimatePresence>\n\t);\n};\n",
      "type": "registry:ui",
      "target": "components/consent/overlay.tsx"
    },
    {
      "path": "components/consent/consent-customization-modal.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/registry/default/components/button\";\nimport {\n\tCard,\n\tCardContent,\n\tCardDescription,\n\tCardHeader,\n\tCardTitle,\n} from \"@/registry/default/components/card\";\nimport { Overlay } from \"@/registry/default/components/consent/overlay\";\nimport { useConsentManager } from \"@koroflow/core-react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { X } from \"lucide-react\";\nimport * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport ConsentCustomizationWidget from \"./consent-customization-widget\";\n\ninterface ConsentCustomizationModalProps {\n\tchildren?: React.ReactNode;\n\ttriggerClassName?: string;\n\tshowCloseButton?: boolean;\n}\n\nconst modalVariants = {\n\thidden: { opacity: 0 },\n\tvisible: { opacity: 1 },\n\texit: { opacity: 0 },\n};\n\nconst contentVariants = {\n\thidden: { opacity: 0, scale: 0.95 },\n\tvisible: {\n\t\topacity: 1,\n\t\tscale: 1,\n\t\ttransition: { type: \"spring\", stiffness: 300, damping: 30 },\n\t},\n\texit: {\n\t\topacity: 0,\n\t\tscale: 0.95,\n\t\ttransition: { duration: 0.2 },\n\t},\n};\n\nconst ModalContent = ({\n\tonClose,\n\tshowCloseButton,\n\thandleSave,\n\tref,\n}: {\n\tonClose: () => void;\n\tshowCloseButton: boolean;\n\thandleSave: () => void;\n\tref: React.RefObject<HTMLDivElement>;\n}) => (\n\t<Card>\n\t\t<CardHeader className=\"relative\">\n\t\t\t{showCloseButton && (\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\tclassName=\"absolute right-2 top-2\"\n\t\t\t\t\tonClick={onClose}\n\t\t\t\t\taria-label=\"Close privacy settings\"\n\t\t\t\t>\n\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t\t<CardTitle id=\"privacy-settings-title\">Privacy Settings</CardTitle>\n\t\t\t<CardDescription>\n\t\t\t\tCustomize your privacy settings here. You can choose which types of\n\t\t\t\tcookies and tracking technologies you allow.\n\t\t\t</CardDescription>\n\t\t</CardHeader>\n\t\t<CardContent>\n\t\t\t<ConsentCustomizationWidget onSave={handleSave} />\n\t\t</CardContent>\n\t</Card>\n);\n\nconst ConsentCustomizationModal = React.forwardRef<\n\tHTMLDivElement,\n\tConsentCustomizationModalProps\n>(({ children, triggerClassName, showCloseButton = false }, ref) => {\n\tconst {\n\t\tisPrivacyDialogOpen,\n\t\tsetIsPrivacyDialogOpen,\n\t\tsetShowPopup,\n\t\tsaveConsents,\n\t} = useConsentManager();\n\tconst [isMounted, setIsMounted] = React.useState(false);\n\tconst contentRef = React.useRef<HTMLDivElement>(null);\n\n\tReact.useEffect(() => {\n\t\tsetIsMounted(true);\n\t\treturn () => setIsMounted(false);\n\t}, []);\n\n\tconst handleOpenChange = React.useCallback(\n\t\t(newOpen: boolean) => {\n\t\t\tsetIsPrivacyDialogOpen(newOpen);\n\t\t\tif (newOpen) {\n\t\t\t\tsetShowPopup(false);\n\t\t\t}\n\t\t},\n\t\t[setIsPrivacyDialogOpen, setShowPopup],\n\t);\n\n\tconst handleSave = React.useCallback(() => {\n\t\tsaveConsents(\"custom\");\n\t\tsetIsPrivacyDialogOpen(false);\n\t}, [setIsPrivacyDialogOpen, saveConsents]);\n\n\tconst handleClose = React.useCallback(() => {\n\t\tsetIsPrivacyDialogOpen(false);\n\t}, [setIsPrivacyDialogOpen]);\n\n\tconst modalContent = (\n\t\t<AnimatePresence mode=\"wait\">\n\t\t\t{isPrivacyDialogOpen && (\n\t\t\t\t<>\n\t\t\t\t\t<Overlay show={isPrivacyDialogOpen} />\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tclassName=\"fixed inset-0 z-50 flex items-center justify-center\"\n\t\t\t\t\t\tvariants={modalVariants}\n\t\t\t\t\t\tinitial=\"hidden\"\n\t\t\t\t\t\tanimate=\"visible\"\n\t\t\t\t\t\texit=\"exit\"\n\t\t\t\t\t\trole=\"dialog\"\n\t\t\t\t\t\taria-modal=\"true\"\n\t\t\t\t\t\taria-labelledby=\"privacy-settings-title\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tref={contentRef}\n\t\t\t\t\t\t\tclassName=\"z-50 w-full max-w-md mx-auto\"\n\t\t\t\t\t\t\tvariants={contentVariants}\n\t\t\t\t\t\t\tinitial=\"hidden\"\n\t\t\t\t\t\t\tanimate=\"visible\"\n\t\t\t\t\t\t\texit=\"exit\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ModalContent\n\t\t\t\t\t\t\t\tref={ref as React.RefObject<HTMLDivElement>}\n\t\t\t\t\t\t\t\tonClose={handleClose}\n\t\t\t\t\t\t\t\tshowCloseButton={showCloseButton}\n\t\t\t\t\t\t\t\thandleSave={handleSave}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t</motion.div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</AnimatePresence>\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<div onClick={() => handleOpenChange(true)}>\n\t\t\t\t{children || (\n\t\t\t\t\t<Button variant=\"outline\" size=\"sm\" className={triggerClassName}>\n\t\t\t\t\t\tCustomise Consent\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{isMounted && createPortal(modalContent, document.body)}\n\t\t</>\n\t);\n});\n\nConsentCustomizationModal.displayName = \"ConsentCustomizationModal\";\n\nexport default ConsentCustomizationModal;\n",
      "type": "registry:ui",
      "target": "components/consent/consent-customization-modal.tsx"
    },
    {
      "path": "components/consent/consent-customization-widget.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport {\n\tAccordion,\n\tAccordionContent,\n\tAccordionItem,\n} from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useConsentManager } from \"@koroflow/core-react\";\nimport { ChevronDown } from \"lucide-react\";\n\ninterface ConsentCustomizationWidgetProps\n\textends React.HTMLAttributes<HTMLDivElement> {\n\tonSave?: () => void;\n}\n\nconst ConsentCustomizationWidget = React.forwardRef<\n\tHTMLDivElement,\n\tConsentCustomizationWidgetProps\n>(({ onSave, ...props }, ref) => {\n\tconst {\n\t\tconsents,\n\t\tsetConsent,\n\t\tsaveConsents,\n\t\tgetDisplayedConsents,\n\t\tresetConsents,\n\t} = useConsentManager();\n\tconst [openItems, setOpenItems] = React.useState<string[]>([]);\n\n\tconst toggleAccordion = React.useCallback((value: string) => {\n\t\tsetOpenItems((prev) =>\n\t\t\tprev.includes(value)\n\t\t\t\t? prev.filter((item) => item !== value)\n\t\t\t\t: [...prev, value],\n\t\t);\n\t}, []);\n\n\tconst handleSaveConsents = React.useCallback(() => {\n\t\tsaveConsents(\"custom\");\n\t\tif (onSave) {\n\t\t\tonSave();\n\t\t}\n\t}, [saveConsents, onSave]);\n\n\tconst handleConsentChange = React.useCallback(\n\t\t(name: string, checked: boolean) => {\n\t\t\tsetConsent(name as any, checked);\n\t\t},\n\t\t[setConsent],\n\t);\n\n\treturn (\n\t\t<div className=\"space-y-6\" ref={ref} {...props}>\n\t\t\t<Accordion\n\t\t\t\ttype=\"multiple\"\n\t\t\t\tvalue={openItems}\n\t\t\t\tonValueChange={setOpenItems}\n\t\t\t\tclassName=\"w-full\"\n\t\t\t>\n\t\t\t\t{getDisplayedConsents().map((consent) => (\n\t\t\t\t\t<AccordionItem value={consent.name} key={consent.name}>\n\t\t\t\t\t\t<div className=\"flex items-center justify-between py-4\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"flex-grow\"\n\t\t\t\t\t\t\t\tonClick={() => toggleAccordion(consent.name)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center justify-between cursor-pointer\">\n\t\t\t\t\t\t\t\t\t<span className=\"font-medium capitalize\">\n\t\t\t\t\t\t\t\t\t\t{consent.name.replace(\"_\", \" \")}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<ChevronDown\n\t\t\t\t\t\t\t\t\t\tclassName={`h-4 w-4 shrink-0 transition-transform duration-200 ${\n\t\t\t\t\t\t\t\t\t\t\topenItems.includes(consent.name) ? \"rotate-180\" : \"\"\n\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\tchecked={consents[consent.name]}\n\t\t\t\t\t\t\t\tonCheckedChange={(checked) =>\n\t\t\t\t\t\t\t\t\thandleConsentChange(consent.name, checked)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdisabled={consent.disabled}\n\t\t\t\t\t\t\t\tclassName=\"ml-4\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<AccordionContent>\n\t\t\t\t\t\t\t<p className=\"text-sm text-muted-foreground pb-4\">\n\t\t\t\t\t\t\t\t{consent.description}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</AccordionContent>\n\t\t\t\t\t</AccordionItem>\n\t\t\t\t))}\n\t\t\t</Accordion>\n\t\t\t<div className=\"flex justify-between\">\n\t\t\t\t<Button onClick={resetConsents} variant=\"outline\">\n\t\t\t\t\tReset\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={handleSaveConsents}>Save Preferences</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n});\n\nConsentCustomizationWidget.displayName = \"ConsentCustomizationWidget\";\n\nexport default ConsentCustomizationWidget;\n",
      "type": "registry:ui",
      "target": "components/consent/consent-customization-widget.tsx"
    }
  ]
}